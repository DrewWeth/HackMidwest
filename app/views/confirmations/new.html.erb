<fb:login-button scope="public_profile,email,user_friends" onlogin="checkLoginState();">
</fb:login-button>

<div id="status"></div>

<style type="text/css">
      #map-canvas { height: 100% }
    </style>
<h1>
	<%= if params[:event_id].present?
			e = Event.find(params[:event_id])
			e[:name]
		end
	%>	Check in
</h1>

<% if params[:event_id].present?
		#puts "************************** EVENT ID "<< params[:event_id].to_s
		e = Event.find(params[:event_id])
		cookies['event_lat_long'] = {
		  :value => e.latitude.to_s << "|" << e.longitude.to_s
		}
	end %>

<% if flash[:message] %>
    <div style="color:red" class="notice"><%= flash[:message] %></div>
<% end %>

<%= render 'form' %>

<%= link_to 'Back', confirmations_path %>

<%- unless @user_lat_lng %>
<div id="map-canvas"/>
<script>
  TestGeo();

  //set the inputs on the form's values to the GET data
  var URL = window.location.href;
  var user_id = URL.substring(URL.indexOf("user_id="), URL.indexOf("&"));
  //console.log(user_id);
  user_id = user_id.substring(8);
  var event_id = URL.substring(URL.indexOf("event_id="));
  var user_location_marker;
  //console.log(event_id);
  event_id = event_id.substring(9);
  //console.log(user_id);
  //console.log(event_id);
  $('#confirmation_user_id').val(user_id);
  $('#confirmation_event_id').val(event_id);
  console.log($('#confirmation_user_id').val());
  console.log($('#confirmation_event_id').val());
	
	function TestGeo()
	{
	     if (navigator.geolocation) 
	        {
	          navigator.geolocation.getCurrentPosition( TestMap, error, {maximumAge: 30000, timeout: 10000, enableHighAccuracy: true} );
	    }
	    else
	    {
	          alert("Sorry, but it looks like your browser does not support geolocation.");
	    }
	}

	function TestMap(position) {
		var latitude = position.coords.latitude;
		var longitude = position.coords.longitude;  
		//alert("Your coordinates are " + position.coords.latitude + ", " + position.coords.longitude);
		// log to cookie
		document.cookie="user_lat_long=" + position.coords.latitude + "|" + position.coords.longitude;
	}

	//split the cookie string
	var array = document.cookie.split(";");
	//split each individual string on an equal sign
	var user_extra = array[0].split('=')[1];
	var event_extra = array[1].split('=')[1];

	//get the actuall values for the lats and longs
	//split the user's lat and long delimited by "|"
	var user_array = user_extra.split("|");
	//split the lat and long of event delimited by "%7C"
	var event_array = event_extra.split("%7C");

	//store the values into an object
	var user = {};
	user.lat = user_array[0];
	user.long = user_array[1];
	a_event = {};
	a_event.lat = event_array[0];
	a_event.long = event_array[1];

	setUpMap(user, a_event);

	function setUpMap(){
		loadScript();
	}

	  // script that is called after the dom loads so we can load the app.
	function loadScript() {
		var script = document.createElement('script');
		script.type = 'text/javascript';
		script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&' +
		  'callback=setUserAndEventOnMap'; //this is the callback function 
		document.body.appendChild(script);
	}

	function setUserAndEventOnMap() {

    //alert("Your coordinates are " + position.coords.latitude + ", " + position.coords.longitude);

    //create markers for both the event and user
    var userLatLng = new google.maps.LatLng(user.lat,user.long);
    var eventLatLng = new google.maps.LatLng(a_event.lat, a_event.long);

    //create a new marker
    user_location_marker = new google.maps.Marker({
      position: userLatLng,
      animation: google.maps.Animation.DROP,
      clickable:true,
      title:"Your location"
    });

    var event_location_marker = new google.maps.Marker({
      position: eventLatLng,
      animation: google.maps.Animation.DROP,
      clickable:true,
      title:"Event"
    });

        // setup the map options
    var mapOptions = {
      zoom: 18,
      center: new google.maps.LatLng(a_event.lat, a_event.long)
    };
    
    //set up the map
    map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);

    /* SETUP USER LOCATION */

    //associate the marker with the map
    user_location_marker.setMap(map);
    event_location_marker.setMap(map);

    //add a listener on the user_location_marker and link animation with it
    google.maps.event.addListener(user_location_marker, 'click', function(){
      panAndZoomToLocation(userLatLng, 18);
    });

    //add a listener on the user_location_marker and link animation with it
    google.maps.event.addListener(event_location_marker, 'click', function(){
      panAndZoomToLocation(eventLatLng, 18);
    });

    //draw a cirlce around the event
    drawCircle(eventLatLng);

    //  Make an array of the LatLng's of the markers you want to show
	adjustMapToFitAllPoints(new Array(userLatLng, eventLatLng));
  }

  function adjustMapToFitAllPoints(LatLngList){

	//  Create a new viewpoint bound
	var bounds = new google.maps.LatLngBounds ();
	//  Go through each...
	for (var i = 0, LtLgLen = LatLngList.length; i < LtLgLen; i++) {
	  //  And increase the bounds to take this point
	  bounds.extend (LatLngList[i]);
	}
	//  Fit these bounds to the map
	map.fitBounds (bounds);
  }

  function panAndZoomToLocation(latLng, zoomLevel){
    map.panTo(latLng);
    map.setZoom(zoomLevel);
  }

  function drawCircle(latLong){
    var eventRadiusOptions = {
      strokeColor: '#00bdf5',
      strokeOpacity: 0.8,
      strokeWeight: 1,
      fillColor: '#19a9e0',
      fillOpacity: 0.35,
      map: map,
      center: latLong,
      radius: 30
    };

    // Add the circle for this city to the map.
    var eventCircle = new google.maps.Circle(eventRadiusOptions);
  }
	function error() {
	alert("Cannot locate user");
	}

	  window.fbAsyncInit = function() {
    FB.init({
      appId      : '520943248035157',
      cookie     : true,  // enable cookies to allow the server to access 
                          // the session
      xfbml      : true,  // parse social plugins on this page
      version    : 'v2.0' // use version 2.0
    });

    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });

  };

	// This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  function testAPI() {
    /* make the API call */
    FB.api(
      "/me/picture",
      function (response) {
        if (response && !response.error) {
          console.log(response);
          user_location_marker.setIcon(response.data.url);
        }else{
          console.log("Cannot get the image of the user");
          console.log(response);
        }
      }
    );
  }

</script>
<%- end %>
